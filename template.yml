AWSTemplateFormatVersion: 2010-09-09
Description: SNS+LambdaSAM deployment stack.
Transform: AWS::Serverless-2016-10-31

Parameters:
  ApprovalStepArn:
    Type: CommaDelimitedList
    Description: Arn for the manual approval, format(arn:aws:codepipeline:region:aws-account-id:pipeline-name/stage-name/action-name)
    Default: '*'
  ChannelId:
    Type: String
    Description: Channel ID of the slack channel
  CronExpression:
    Type: String
    Description: Cron for running the pending approval rejection function
    Default: '0 0 * * ? *'
  ExpiryInHours:
    Type: Number
    Description: Expiry of the approval check in no. of hours
    Default: 48
  ProjectName:
    Type: String
    Description: Project name or app name.
    Default: checkpoint
  SlackOAuthToken:
    Type: String
    Description: OAuth Token for API request to slack
    Default: checkpoint
  SlackVerificationToken:
    Type: String
    Description: Verification Token for Approval Handler Function
  SnsTopicName:
    Type: String
    Description: SNS Topic Name
    Default: Approval-Notifications
  TableName:
    Type: String
    Description: Table name to be created in DynamoDB
    Default: ManualApprovalTracker01

Resources:
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Ref SnsTopicName
      Tags:
        - Key: ProjectName
          Value: !Ref ProjectName
      TopicName: !Ref SnsTopicName

  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt SlackNotification.Arn
      Protocol: LAMBDA
      TopicArn: !Ref SNSTopic

  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: pipeline_name
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        -
          AttributeName: pipeline_name
          KeyType: HASH
      TableName: !Ref TableName

  SlackNotification:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./slack-notification
      MemorySize: 128
      Timeout: 3
      Handler: lambda_function.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          CHANNEL_ID: !Ref ChannelId
          SLACK_OAUTH_TOKEN: !Ref SlackOAuthToken
          TABLE_NAME: !Ref TableName
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: arn:aws:logs:eu-west-1:961354904951:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - >-
                  arn:aws:logs:eu-west-1:961354904951:log-group:/aws/lambda/SlackNotificationFunction:*
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource:
                - !GetAtt DynamoTable.Arn
      SnapStart:
        ApplyOn: None
      Events:
        SNS1:
          Type: SNS
          Properties:
            Topic: !Ref SNSTopic

  ApprovalHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./approval-handler
      MemorySize: 128
      Timeout: 3
      Handler: lambda_function.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          CHANNEL_ID: !Ref ChannelId
          SLACK_VERIFICATION_TOKEN: !Ref SlackVerificationToken
          TABLE_NAME: !Ref TableName
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - codepipeline:PutApprovalResult
              Resource: !Ref ApprovalStepArn
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource:
                - !GetAtt DynamoTable.Arn
      SnapStart:
        ApplyOn: None
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /ApprovalHandler
            Method: POST

  PendingApprovalHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./pending-approval-handler
      MemorySize: 128
      Timeout: 3
      Handler: lambda_function.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          CHANNEL_ID: !Ref ChannelId
          EXPIRY_IN_HOURS: !Ref ExpiryInHours
          SLACK_OAUTH_TOKEN: !Ref SlackOAuthToken
          TABLE_NAME: !Ref TableName
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - codepipeline:PutApprovalResult
              Resource: !Ref ApprovalStepArn
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:Scan
              Resource:
                - !GetAtt DynamoTable.Arn
      SnapStart:
        ApplyOn: None
      Events:
        Schedule1:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: !Join [
              "",
              [
                "cron",
                "(",
                !Ref CronExpression,
                ")"
              ]
            ]

